# vim:ft=zsh

# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh

# Set to the name theme to load.
# Look in ~/.oh-my-zsh/themes/
export ZSH_THEME="arrow"

# Set to this to use case-sensitive completion
# export CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
export DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# export DISABLE_LS_COLORS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git autojump npm nvm node history docker)

source $ZSH/oh-my-zsh.sh

# Do not persist commands starting with *space* in zsh history
setopt HIST_IGNORE_SPACE

# Enable exotic globbing
setopt extendedglob

# `gm` alias from oh-my-zsh/git conflicts with GraphicsMagick
unalias gm

# Re-bind edit-command-line
# (for some reason, the binding gets lost)
bindkey "\C-x\C-e" edit-command-line

# <c-z> runs fg
fg_widget() fg
zle -N fg_widget
bindkey '^z' fg_widget

# Customize to your needs...
export EDITOR=vim
export SHELL=zsh
if uname | grep -q Darwin;
then
  export BROWSER=open
else
  export BROWSER=google-chrome
fi

fpath=(/usr/local/share/zsh-completions $fpath)

# Prevent oh-my-zsh from auto-updating window titles
export DISABLE_AUTO_TITLE=true

# run command in a new tmux pane, while keeping
# the cursor at the current shell
# e.g. tmw watch -n 1 uptime
tmw() {
   tmux split-window -d -p 80 "$@"
}

# Use some sensible gtimeout defaults
gtimeout() {
  command gtimeout --foreground --preserve-status "$@"
}

# SSH to multiple hosts and
# turn on synchronization
function tssh() {
  if [ "$1" = "-e" ];
  then
    shift
    tmux rename-window "tssh"
    tssh $(nodeset -e "$@")
  else
    for (( i=$#; i>0; i-- )); do
      tmux split-window -d -p$((100 / $i)) "ssh $1"
      tmux select-layout tiled
      shift;
    done
    tmux setw synchronize-panes
    exit
  fi
}

watch() {
  command watch -n1 "zsh -l -c \"source ~/.zshrc; $@\""
}

alias ggpull='git pull --rebase origin $(current_branch)'
alias gd='git difftool'
gitweb() {
   branch=$(current_branch) || return
   $BROWSER $(sed -e "s#^.*\(git[^\.]*\.[^:\.]*\)[:\.]#http://\1/#" -e "s#\.git#/pipelines#" <(git config --get remote.origin.url)) 2>& /dev/null
}

swap() {
  local TMP="_$1.tmp_"
  mv $1 $TMP && mv $2 $1 &&  mv $TMP $2
}

alias ll='ls -lh'

# Expands into JS source files under current directory
# Excludes any files under node_modules, bower_components, or dist
#
# Example usage: jshint jss
alias -g jss='**/*.js~(*node_modules|dist|*styleguide)/*'

# Aggregates stats from numbers flowing into stdin
#
# Example usage: cat logs | grep endpoint | jq -r .took | stats
alias -g stats='datamash -H count 1 max 1 mean 1 q3 1 perc 1 | column -t'

export PATH=~/.bin:/usr/local/sbin:/usr/local/bin:/usr/local/opt/node@6/bin:/usr/local/opt/go@1.7/bin:$PATH
export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
export GOPATH=~/gocode

# Bootstrap nvm
# Will set the node version when the working dir has .nvmrc
nvm use 2> /dev/null 1> /dev/null

if [[ -f /usr/bin/tmux || -f /usr/local/bin/tmux ]]; then
  # attach to an already running tmux session or create new one
  # unless we're running a login shell in a virtual console or via SSH
  tty | grep -qo /dev/tty.$ || test "$SSH_TTY" || test "$TMUX" || tmux attach 2>/dev/null || tmux new-session
fi
