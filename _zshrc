# vim:ft=zsh

# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh

# Set to the name theme to load.
# Look in ~/.oh-my-zsh/themes/
export ZSH_THEME="arrow"

# Set to this to use case-sensitive completion
# export CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
export DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# export DISABLE_LS_COLORS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(archlinux git git-flow autojump npm mvn nvm node history docker)

source $ZSH/oh-my-zsh.sh

# Do not persist commands starting with *space* in zsh history
setopt HIST_IGNORE_SPACE

# Enable exotic globbing
setopt extendedglob

# `gm` alias from oh-my-zsh/git conflicts with GraphicsMagick
unalias gm

# Re-bind edit-command-line
# (for some reason, the binding gets lost)
bindkey "\C-x\C-e" edit-command-line

# <c-z> runs fg
fg_widget() fg
zle -N fg_widget
bindkey '^z' fg_widget

# Customize to your needs...
export EDITOR=vim
export SHELL=zsh
export BROWSER=google-chrome-stable

# Prevent oh-my-zsh from auto-updating window titles
export DISABLE_AUTO_TITLE=true

# run command in a new tmux pane, while keeping
# the cursor at the current shell
# e.g. tmw watch -n 1 uptime
tmw() {
   tmux split-window -d -p 80 "$@"
}

# Use some sensible gtimeout defaults
gtimeout() {
  command gtimeout --foreground --preserve-status "$@"
}

# SSH to multiple hosts and
# turn on synchronization
function tssh() {
  if [ "$1" = "-g" ];
  then
    tmux rename-window "ssh: $2"
    tssh $(paste -sd' ' ~/.dsh/group/$2)
  else
    for (( i=$#; i>0; i-- ));
    do
      tmux split-window -d -p$((100 / $i)) "ssh $1"
      shift;
    done
    tmux setw synchronize-panes
    exit
  fi
}

watch() {
  command watch -n1 "zsh -l -c \"source ~/.zshrc; $@\""
}

# Inline aliases for removing stopped containers or untagged images
# Usage:
#  ssh $HOST drm
#  clush -w @consul:name drmi
alias -g drm='"comm -13 <(sudo docker ps -q |sort) <(sudo docker ps -aq |sort) | xargs -r sudo docker rm"'
alias -g drmi='"sudo docker images | grep none | cut -c 61-72 | xargs -r sudo docker rmi"'


v() { vim =($@) }
nautilus() { command nautilus --no-desktop > /dev/null 2>&1 "$@" &! }
reboot() { sudo umount -a -t cifs && sudo reboot $@ }

yaweb() {
   if [ -z "$*" ]; then return; fi
   (yaourt -Si $@ | grep URL | cut -f2,3 -d: | xargs --no-run-if-empty $BROWSER) 2>/dev/null
}

# (Much) Faster equivalent to 'sort | uniq -c'
alias uniqc="awk '{ s[\$1]++ } END { for (i in s) {print s[i], i} }' | column -t"

alias ggpull='git pull --rebase origin $(current_branch)'
alias gd='git difftool'
alias ggl='git log --decorate --oneline --graph --all -20'
gitweb() {
   branch=$(current_branch) || return
   $BROWSER $(sed -e "s#^.*\(git[^\.]*\.[^:\.]*\)[:\.]#http://\1/#" -e "s#\.git#/tree/$(current_branch)#" <(git config --get remote.origin.url)) 2>& /dev/null
}

swap() {
  local TMP="_$1.tmp_"
  mv $1 $TMP && mv $2 $1 &&  mv $TMP $2
}

alias ll='ls -lh'

# Expands into JS source files under current directory
# Excludes any files under node_modules, bower_components, or dist
#
# Example usage: jshint jss
alias -g jss='**/*.js~(*node_modules|*bower_components|dist|*styleguide)/*'

jkill() { jps 2>/dev/null | grep -i $1 | awk '{print $1}' | xargs kill -9 }

pdfslice() {
   # Usage: pdfslice ~/path/to/file.pdf a[-b]
   # Crops pages a[-b] from file.pdf into ~/path/to/filea[-b].pdf
   #
   # Requires 'psutils' and 'poppler' packages
   #
   pdftops $1 - | psselect -p$2 | ps2pdf - ${1:r}$2.pdf
}

mvn() {
   PURPLE=$(echo -en "\033[35m")
   GREEN=$(echo -en "\033[32m")
   RED=$(echo -en "\033[31m")
   YELLOW=$(echo -e "\033[33m")
   NORMAL=$(echo -e "\033[0m")
   command mvn $* | sed \
           -e "s/^\(.ERROR. .*\)$/$RED\1$NORMAL/" \
           -e "s/^\([^\[].*\)/${YELLOW}\1${NORMAL}/" \
           -e "s/^\(.INFO. ----.*\)$/$PURPLE\1$NORMAL/" \
           -e "s/^\(.INFO. Building.*SNAPSHOT\)$/$PURPLE\1$NORMAL/" \
           -e "s/^\(.INFO. --- .* ---.*\)$/$PURPLE\1$NORMAL/"\
           -e "s/^\(.INFO. .*\)$/$GREEN\1$NORMAL/" \
           -e "s/^\(.WARNING. .*\)$/$YELLOW\1$NORMAL/"
}

alias mci='mvn clean install -Dmaven.test.skip=true -T2'
export M2_MEM="-Xms512m -Xmx768m -XX:PermSize=256m -XX:MaxPermSize=256m"
export M2_DEBUG="$M2_MEM -Dmaven.test.skip=true -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000"
export M2_DEBUG_ALT="${M2_DEBUG/8000/4000}"

export SBT_OPTS=$M2_MEM

export IPAD_AGENT="Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10"

alias minecraft='java -Xmx1024M -Xms512M -cp ~/minecraft.jar net.minecraft.LauncherFrame'

export PATH=~/.gem/ruby/2.0.0/bin:/usr/local/sbin:/usr/local/bin:/usr/local/opt/node@6/bin:/usr/local/opt/go@1.7/bin:$PATH
export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
export GOPATH=~/gocode

uname | grep -q Darwin && source ~/.zshrc.mac

# Bootstrap nvm
# Will set the node version when the working dir has .nvmrc
nvm use 2> /dev/null 1> /dev/null

if [[ -f /usr/bin/tmux || -f /usr/local/bin/tmux ]]; then
  # attach to an already running tmux session or create new one
  # unless we're running a login shell in a virtual console or via SSH
  tty | grep -qo /dev/tty.$ || test "$SSH_TTY" || test "$TMUX" || tmux attach 2>/dev/null || tmux new-session
fi
